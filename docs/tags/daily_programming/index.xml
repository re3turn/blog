<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily_programming on return 3</title>
    <link>https://re3turn.github.io/blog/tags/daily_programming/</link>
    <description>Recent content in Daily_programming on return 3</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>re3turn@gmail.com (re3turn)</managingEditor>
    <webMaster>re3turn@gmail.com (re3turn)</webMaster>
    <lastBuildDate>Thu, 10 May 2018 00:21:17 +0900</lastBuildDate>
    
	<atom:link href="https://re3turn.github.io/blog/tags/daily_programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Daily Programming #0005</title>
      <link>https://re3turn.github.io/blog/post/daily_programming_0005/</link>
      <pubDate>Thu, 10 May 2018 00:21:17 +0900</pubDate>
      <author>re3turn@gmail.com (re3turn)</author>
      <guid>https://re3turn.github.io/blog/post/daily_programming_0005/</guid>
      <description>言語処理100本ノック 2015の#03をやっていく。
03. 円周率 [Golang] Question &amp;ldquo;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.&amp;ldquo;という文を単語に分解し，各単語の（アルファベットの）文字数を先頭から出現順に並べたリストを作成せよ
Code  GoにしてもPythonにしても文字列操作は簡単でいい。</description>
    </item>
    
    <item>
      <title>Daily Programming #0004</title>
      <link>https://re3turn.github.io/blog/post/daily_programming_0004/</link>
      <pubDate>Wed, 09 May 2018 03:28:47 +0900</pubDate>
      <author>re3turn@gmail.com (re3turn)</author>
      <guid>https://re3turn.github.io/blog/post/daily_programming_0004/</guid>
      <description>言語処理100本ノック 2015の#02をやっていく。
02. 「パトカー」＋「タクシー」＝「パタトクカシーー」 [Golang] Question 「パトカー」＋「タクシー」の文字を先頭から交互に連結して文字列「パタトクカシーー」を得よ
Code  2つの文字列の長さが違う場合を考慮してこんな形にしてみた。
ここの回答にあるみたいにstringに追加していくのとスライスを予め作って追加していくのだとどちらがいいのだろうか？</description>
    </item>
    
    <item>
      <title>Daily Programming #0003</title>
      <link>https://re3turn.github.io/blog/post/daily_programming_0003/</link>
      <pubDate>Tue, 08 May 2018 23:45:46 +0900</pubDate>
      <author>re3turn@gmail.com (re3turn)</author>
      <guid>https://re3turn.github.io/blog/post/daily_programming_0003/</guid>
      <description> 言語処理100本ノック 2015の01をやっていく。
01. 「パタトクカシーー」 [Golang] runeに変換して1,3,5,7文字目を取り出せばすぐだけど一応汎用的に書いた。
Question 「パタトクカシーー」という文字列の1,3,5,7文字目を取り出して連結した文字列を得よ
Code  </description>
    </item>
    
    <item>
      <title>Daily Programming #0002</title>
      <link>https://re3turn.github.io/blog/post/daily_programming_0002/</link>
      <pubDate>Mon, 07 May 2018 21:44:59 +0900</pubDate>
      <author>re3turn@gmail.com (re3turn)</author>
      <guid>https://re3turn.github.io/blog/post/daily_programming_0002/</guid>
      <description> 言語処理100本ノック 2015をやっていく。
00. 文字列の逆順 [Golang] Pythonだと1行で終わるのにGoだと真面目に実装しなきゃいけないのか・・・
ぐぐったけど大体同じような回答と同じような感想の人がいっぱいいた。 runeを使うのとbyteを使うのどっちがいいんですかね？
Question 文字列&amp;rdquo;stressed&amp;rdquo;の文字を逆に（末尾から先頭に向かって）並べた文字列を得よ
Code  </description>
    </item>
    
    <item>
      <title>Daily Programming #0001</title>
      <link>https://re3turn.github.io/blog/post/daily_programming_0001/</link>
      <pubDate>Sun, 06 May 2018 20:58:31 +0900</pubDate>
      <author>re3turn@gmail.com (re3turn)</author>
      <guid>https://re3turn.github.io/blog/post/daily_programming_0001/</guid>
      <description> 初日なのでとりあえずFizzBuzz。
FizzBuzzは、1から表示するものと0から表示するものがあるが、今回は0から表示するものにした。オーソドックスなのは1-100のタイプ。
最近Goを勉強し始めたが、GoはCを習得してる人であれば比較的すんなり書ける言語だと思う。
FizzBuzz [Golang] Question 0から100までの数を順に表示していく。ただし、3の倍数の時は数字の代わりに &amp;lsquo;Fizz&amp;rsquo; と表示する。5の倍数のときは数字の代わりに &amp;lsquo;Buzz&amp;rsquo; と表示する。両方の倍数のときは数字の代わりに &amp;lsquo;FizzBuzz&amp;rsquo; と表示する。0の場合は数字を表示する。
Code  </description>
    </item>
    
    <item>
      <title>Daily Programming Rules</title>
      <link>https://re3turn.github.io/blog/post/daily_programming_rule/</link>
      <pubDate>Sun, 06 May 2018 16:42:01 +0900</pubDate>
      <author>re3turn@gmail.com (re3turn)</author>
      <guid>https://re3turn.github.io/blog/post/daily_programming_rule/</guid>
      <description> 制限時間内(1時間)にプログラムを作成 完成したらブログを更新する(更新時間:15分以内) 題材:自由(出典記載要) 使用言語:自由 15分以上行き詰まった場合、参考サイトを見る(その旨をブログに記載) 無理はしない どうしてもできなかった場合は後日でも可  </description>
    </item>
    
  </channel>
</rss>